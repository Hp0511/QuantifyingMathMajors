library(tidyverse)
url <- "https://raw.githubusercontent.com/milesdwilliams15/Teaching/refs/heads/main/DPR%20101/Data/Inter-StateWarData_v4.0.csv"
wars <- read_csv(url)
## Make the plot
wars |>
group_by(WarName) |>
summarize(
year = min(StartYear1),
deaths = sum(BatDeath)
) |>
ggplot() +
aes(x = year, y = deaths) +
geom_pointrange(
aes(ymin = 0, ymax = deaths),
color = "gray",
size = .2
) +
geom_point(
data = . %>%
slice_max(deaths, n = 5),
color = "red",
size = 2
) +
ggrepel::geom_text_repel(
data = . %>%
slice_max(deaths, n = 5),
aes(
label = paste0(
WarName, "\n", scales::comma(deaths)
)
),
color = "black",
bg.color = "white",
size = 3,
min.segment.length = unit(0, "in"),
box.padding = 1
) +
scale_y_continuous(
labels = ~ paste0(.x / 1e06, " mil.")
) +
scale_x_continuous(
n.breaks = 20
) +
labs(
x = NULL,
y = NULL,
title = "The top 5 deadliest wars since 1816",
subtitle = "Total battle deaths in millions by start year"
) +
ggthemes::theme_fivethirtyeight() +
theme(
legend.position = "",
axis.text.x = element_text(
angle = 45,
hjust = 1
),
panel.grid.major.x = element_blank()
)
library(tidyverse)
url <- "https://raw.githubusercontent.com/milesdwilliams15/Teaching/refs/heads/main/DPR%20101/Data/Inter-StateWarData_v4.0.csv"
wars <- read_csv(url)
## Make the plot
wars |>
group_by(WarName) |>
summarize(
year = min(StartYear1),
deaths = sum(BatDeath)
) |>
ggplot() +
aes(x = year, y = deaths) +
geom_pointrange(
aes(ymin = 0, ymax = deaths),
color = "gray",
size = .2
) +
geom_point(
data = . %>%
slice_max(deaths, n = 5),
color = "red",
size = 2
) +
ggrepel::geom_text_repel(
data = . %>%
slice_max(deaths, n = 5),
aes(
label = paste0(
WarName, "\n", scales::comma(deaths)
)
),
color = "black",
bg.color = "white",
size = 3,
min.segment.length = unit(0, "in"),
box.padding = 1
) +
scale_y_continuous(
labels = ~ paste0(.x / 1e06, " mil.")
) +
scale_x_continuous(
n.breaks = 20
) +
labs(
x = NULL,
y = NULL,
title = "The top 5 deadliest wars since 1816",
subtitle = "Total battle deaths in millions by start year"
) +
ggthemes::theme_fivethirtyeight() +
theme(
legend.position = "",
axis.text.x = element_text(
angle = 45,
hjust = 1
),
panel.grid.major.x = element_blank()
)
View(wars)
# Insert your codes here.
t_result <- t.test(startup_data$`RD.Spend`, startup_data$Administration, paired = TRUE)
library(tidyverse)
startup_data <- read.csv("../hw8/Startups.csv")
# Insert your codes here.
numeric_data <- startup_data[sapply(startup_data, is.numeric)]
summary_stats <- data.frame(
Mean = sapply(numeric_data, mean, na.rm = TRUE),
Variance = sapply(numeric_data, var, na.rm = TRUE),
IQR = sapply(numeric_data, IQR, na.rm = TRUE)
)
print(summary_stats)
# Insert your codes here
state_data <- startup_data |>
filter(State %in% c("New York", "California", "Florida")) |>
count(State, name = "Count") |>
mutate(Percentage = Count / sum(Count) * 100)
# Create the pie chart
ggplot(state_data, aes(x = "", y = Count, fill = State)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage Distribution of Startups data by State") +
theme_void() +
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5))
# Insert your codes here
ggplot(startup_data, aes(x = State, y = Administration, fill = State)) +
geom_boxplot() +
labs(
title = "Administration Spending by State",
x = "State",
y = "Administration Spending"
) +
theme_minimal()
# Insert your codes here.
ggplot(startup_data, aes(x = Administration, fill = State)) +
geom_density(alpha = 0.5) +
facet_wrap(~ State) +
labs(title = "Density Plot of Administration Spending by State") +
theme_minimal()
# Insert your codes here.
get_ci <- function(data, conf_level) {
t_result <- t.test(data, conf.level = conf_level)
return(c(lower = t_result$conf.int[1], upper = t_result$conf.int[2]))
}
ci_results <- startup_data |>
group_by(State) |>
summarise(
CI_95_Lower = get_ci(Administration, 0.95)[1],
CI_95_Upper = get_ci(Administration, 0.95)[2],
CI_90_Lower = get_ci(Administration, 0.90)[1],
CI_90_Upper = get_ci(Administration, 0.90)[2]
)
print(ci_results)
# Insert your codes here.
ny_data <- subset(startup_data, State == "New York")
# Perform one-sided t-test
t_test_result <- t.test(ny_data$Profit, mu = 113000, alternative = "less", conf.level = 0.90)
# View result
print(t_test_result)
# Insert your codes here.
t_result <- t.test(startup_data$`RD.Spend`, startup_data$Administration, paired = TRUE)
# View test result
print(t_result)
# Compare means
mean_rd <- mean(startup_data$`RD.Spend`)
mean_admin <- mean(startup_data$Administration)
cat("Mean R&D Spend:", round(mean_rd, 2), "\n")
cat("Mean Administration Spend:", round(mean_admin, 2), "\n")
# Insert your codes here.
state_means <- startup_data %>%
group_by(State) %>%
summarise(Mean_Marketing = mean(Marketing.Spend)) %>%
arrange(desc(Mean_Marketing))
print(state_means)
# Step 2: Identify top state
top_state <- state_means$State[1]
cat("State with highest marketing budget:", top_state, "\n")
# Step 3: Separate data
top_state_data <- subset(startup_data, State == top_state)$Marketing.Spend
other_states_data <- subset(startup_data, State != top_state)$Marketing.Spend
# Step 4: Perform two-sample t-test (unequal variance)
t_result <- t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
# Step 5: Output test result
print(t_result)
# Insert your codes here if needed.
state_means <- startup_data %>%
group_by(State) %>%
summarise(Mean_Marketing = mean(Marketing.Spend, na.rm = TRUE)) %>%
arrange(desc(Mean_Marketing))
print(state_means)
top_state <- state_means$State[1]
# Convert 0s in Marketing Spend to NA
startup_data$Marketing.Spend[startup_data$Marketing.Spend == 0] <- NA
sum(is.na(startup_data$Marketing.Spend))  # Number of NAs in Marketing Spend
top_state_data <- startup_data %>%
filter(State == top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
other_states_data <- startup_data %>%
filter(State != top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
# Perform t-test
t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
library(tidyverse)
startup_data <- read.csv("../Startups.csv")
library(tidyverse)
startup_data <- read.csv("../hw8/Startups.csv")
print(t_test_result)
# Insert your codes here.
ny_data <- subset(startup_data, State == "New York")
t_test_result <- t.test(ny_data$Profit, mu = 113000, alternative = "less", conf.level = 0.90)
# Insert your codes here.
t_result <- t.test(startup_data$`RD.Spend`, startup_data$Administration, paired = TRUE)
print(t_result)
# Compare means
mean_rd <- mean(startup_data$`RD.Spend`)
mean_admin <- mean(startup_data$Administration)
cat("Mean R&D Spend:", round(mean_rd, 2), "\n")
cat("Mean Administration Spend:", round(mean_admin, 2), "\n")
print(t_result)
# Insert your codes here.
t_result <- t.test(startup_data$`RD.Spend`, startup_data$Administration, paired = TRUE)
# Compare means
mean_rd <- mean(startup_data$`RD.Spend`)
mean_admin <- mean(startup_data$Administration)
cat("Mean R&D Spend:", round(mean_rd, 2), "\n")
cat("Mean Administration Spend:", round(mean_admin, 2), "\n")
# Insert your codes here.
state_means <- startup_data %>%
group_by(State) %>%
summarise(Mean_Marketing = mean(Marketing.Spend)) %>%
arrange(desc(Mean_Marketing))
print(state_means)
top_state <- state_means$State[1]
cat("State with highest marketing budget:", top_state, "\n")
top_state_data <- subset(startup_data, State == top_state)$Marketing.Spend
other_states_data <- subset(startup_data, State != top_state)$Marketing.Spend
t_result <- t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
print(t_result)
print(state_means)
print(t_result)
# Insert your codes here.
state_means <- startup_data %>%
group_by(State) %>%
summarise(Mean_Marketing = mean(Marketing.Spend)) %>%
arrange(desc(Mean_Marketing))
top_state <- state_means$State[1]
cat("State with highest marketing budget:", top_state, "\n")
top_state_data <- subset(startup_data, State == top_state)$Marketing.Spend
other_states_data <- subset(startup_data, State != top_state)$Marketing.Spend
t_result <- t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
print(state_means)
print(t_result)
# Convert 0s in Marketing Spend to NA
startup_data$Marketing.Spend[startup_data$Marketing.Spend == 0] <- NA
sum(is.na(startup_data$Marketing.Spend))  # Number of NAs in Marketing Spend
top_state_data <- startup_data %>%
filter(State == top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
other_states_data <- startup_data %>%
filter(State != top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
# Perform t-test
t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
# Insert your codes here if needed.
state_means <- startup_data %>%
group_by(State) %>%
summarise(Mean_Marketing = mean(Marketing.Spend, na.rm = TRUE)) %>%
arrange(desc(Mean_Marketing))
print(state_means)
top_state <- state_means$State[1]
print(t_result)
# Enter your code here if needed
startup_data$Marketing.Spend[startup_data$Marketing.Spend == 0] <- NA
sum(is.na(startup_data$Marketing.Spend))  # Number of NAs in Marketing Spend
top_state_data <- startup_data %>%
filter(State == top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
other_states_data <- startup_data %>%
filter(State != top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
# Perform t-test
t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
# Enter your code here if needed
startup_data$Marketing.Spend[startup_data$Marketing.Spend == 0] <- NA
sum(is.na(startup_data$Marketing.Spend))  # Number of NAs in Marketing Spend
top_state_data <- startup_data %>%
filter(State == top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
other_states_data <- startup_data %>%
filter(State != top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
# Perform t-test
t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
# Enter your code here if needed
startup_data$Marketing.Spend[startup_data$Marketing.Spend == 0] <- NA
sum(is.na(startup_data$Marketing.Spend))  # Number of NAs in Marketing Spend
top_state_data <- startup_data %>%
filter(State == top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
other_states_data <- startup_data %>%
filter(State != top_state) %>%
pull(Marketing.Spend) %>%
na.omit()
# Perform t-test
missingdata_test <- t.test(top_state_data, other_states_data, alternative = "greater", var.equal = FALSE)
print(missingdata_test)
shiny::runApp('C:/Huy Phan/College/math-major-spring25/dashboard/Math_major_dashboard')

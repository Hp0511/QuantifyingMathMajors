function output = parseBuckets(data)
    % Recursive function to parse an arbitrarily sized data table into a nested cell array
    % (first draft generated by ChatGPT 11/09/24)

    % initialize the top-level cell array
    output = {};

    % find the indices where "Bucket" appears in the first column
    bucketIndices = find(strcmp(data(:, 1), 'Bucket'));
    % count how many buckets
    numBuckets = numel(bucketIndices);
    % loop through each main bucket
    for ii = 1:numBuckets
        % if not on the last bucket...
        if ii < numBuckets
            % extract data between the current and the next "Bucket" row
            bucketData = data(bucketIndices(ii):bucketIndices(ii+1)-1, 2:end);
        % if on the last bucket...
        else
            % extract data from the last "Bucket" row to the end of the table
            bucketData = data(bucketIndices(ii):end, 2:end);
        end

        % check if there are more "Bucket" rows within the current subset
        subBucketIndices = find(strcmp(bucketData(:,1), 'Bucket'));

        % if no more "Bucket" rows...
        if isempty(subBucketIndices)
            % store the value and course names
            output{ii} = bucketData(:,1);
        % if there are nested "Bucket rows...
        else
            % save number of required sub-buckets
            temp = bucketData(subBucketIndices(1)-1,1);
            % convert to number
            subResult{1,1} = str2num(temp{1});
            
            % recursively call parseBuckets for sub-buckets
            for jj = 1:numel(subBucketIndices)
                if jj < numel(subBucketIndices)
                    % extract data between the current and the next "Bucket" row
                    subData = bucketData(subBucketIndices(jj):subBucketIndices(jj+1)-1, 1:end);
                else
                    % extract data from the last "Bucket" row to the end of the table
                    subData = bucketData(subBucketIndices(jj):end, 1:end);
                end
                % parse bucket
                temp = parseBuckets(subData);
                % extract and save results
                subResult{jj+1,1} = temp{1};
            end
            % add results to cell structure
            output{ii} = subResult;
        end
    end
end
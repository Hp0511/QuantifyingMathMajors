%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Create structures - Setup for algorithm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Import data
importCoursePrereqs;  % coursePrereqs: Prerequisite structure
importCourseSchedules;      % courseSchedules: Schedule availability
importCollegeStructure;
importBuckets;        % bucketStruct: Bucket requirements

% Parse prerequisite structure into a directed graph
course_prereq_pairs = [course_prereqs(:,1), course_prereqs(:,2)];
for ii = 3:length(course_prereqs(1,:))
    % Add extra prerequisites to the graph
    course_prereq_pairs = [course_prereq_pairs; ...
                           course_prereqs(:,1), course_prereqs(:,ii)];
end
clear ii;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initial Processing With
% BUCKETS
% COURSE PREREQS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Create graph for courses
courses = digraph(course_prereq_pairs(:,1), course_prereq_pairs(:,2));
courses = rmnode(courses, "");  % Remove empty string nodes
% plot(courses);

% Parse bucket structure
bucketStruct = parseBuckets(buckets);
%Getting all possible combination to satisfy the bucketStruct
allBucketCombinations = processBigBucket(bucketStruct);
minimalRequirementSet = getMinimalRequiredCourseSets(allBucketCombinations);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main Processing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Step 1: pick start term (start with rightmost column of schedule structure)
startTerm = "S2021";
maxCourseperTerm = 4;
year = 4;

% Step 2: Get all possible course combinations for each term
dfsRoots = {};
totalOfferedCourseSet = getOfferedCourses(courseSchedules,startTerm);


% Step 3: Build a graph of all possible combinations
%get all the term names
termNames = flip(courseSchedules.Properties.VariableNames(2:end)); % Skip the first column
[graph, nodetable, dfsRoots] = buildCombinationGraph(courses,termNames, totalOfferedCourseSet, maxCourseperTerm, year);
%plot(graph);
% Step 4: Perform DFS to find valid paths that satisfy all buckets
[legit,validPaths] = dfsFindValidPaths(graph, dfsRoots, nodetable, minimalRequirementSet);

%Step 5: Display valid Courses for checking
validCourses = extractValidCoursesBySemester(validPaths, nodetable);
shortestPaths = findAllShortestValidCoursePaths(validCourses);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Helper Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALL BUCKET COMBINATION BUILDING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function bigBucketCombinations = processBigBucket(bigBucket)
    % Initialize the output with the same structure as the big bucket
    bigBucketCombinations = cell(1, length(bigBucket));
    
    % Iterate over each sub-bucket in the big bucket
    for i = 1:length(bigBucket)
        subBucket = bigBucket{i}; % Get the sub-bucket
        % Process the sub-bucket
        subBucketCombinations = processSubBucket(subBucket);
        % Store the combinations for this sub-bucket in the corresponding row
        bigBucketCombinations{i} = subBucketCombinations;
    end
end


function subBucketCombinations = processSubBucket(subBucket)
    % Initialize the output
    subBucketCombinations = {};
    
    % Extract the number of required courses (k)
    k = str2double(subBucket{1}); % First element gives the required number
    
    % Initialize a list of available courses
    availableCourses = {};
    
    % Collect courses from rows 2:end
    for i = 2:length(subBucket)
        currentElement = subBucket{i};
        if iscell(currentElement) && size(currentElement, 1) > 1 % Check for nested sub-bucket
            % Recursively process the nested sub-bucket
            nestedCombinations = processSubBucket(currentElement);
            availableCourses = [availableCourses; nestedCombinations]; % Add nested combinations
        else
            % Add the course to the available list
            availableCourses{end+1} = currentElement;
        end
    end
    
    % Generate combinations of k courses
    if length(availableCourses) >= k
        combos = nchoosek(availableCourses, k); % Generate k-combinations
        for c = 1:size(combos, 1)
            subBucketCombinations{end+1} = combos(c, :); 
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GENERATE ALL MINIMAL REQUIRED COURSE SETS FROM BUCKETS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function minimalRequirementSets = getMinimalRequiredCourseSets(allBucketCombinations)
    % Initialize output with an empty starting set
    minimalRequirementSets = {{}};

    % Iterate over each bucket
    for bucketIndex = 1:length(allBucketCombinations)
        bucketCombinations = allBucketCombinations{bucketIndex};
        newSets = {}; % Temporary storage for new minimal requirement sets
        
        % Expand the minimal requirement sets with all choices from the current bucket
        for existingSetIdx = 1:length(minimalRequirementSets)
            existingSet = minimalRequirementSets{existingSetIdx};
            
            % Append each valid course combination from the bucket
            for combIdx = 1:length(bucketCombinations)
                newSet = [existingSet, bucketCombinations{combIdx}];
                newSets{end+1} = unique(newSet); %#ok<AGROW>
            end
        end
        
        % Update minimalRequirementSets with the expanded combinations
        minimalRequirementSets = newSets;
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get offerered Courses through our whole course schedules
% starting from the start term
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function totalCourseSet = getOfferedCourses(courseSchedules, startTerm)
    % Extract term names (excluding the first column)
    alltermNames = courseSchedules.Properties.VariableNames(2:end); % Skip the first column

    % Find the index of the start term
    startTermIndex = find(strcmp(alltermNames, startTerm), 1); % Find the column index of startTerm
    % for example S2021 would be 8 here
    if isempty(startTermIndex)
        error('Start term not found in course schedules.');
    end
    
    % Initialize an empty cell array for the total set of courses
    totalCourseSet = {};
    
    % Outer loop: Iterate over columns (startTermIndex to the last term)
    for col = startTermIndex+1:-1:2
        % Initialize an empty cell array for the current semester set
        semSet = {};
        
        % Inner loop: Iterate row-wise through the current column
        for row = 1:height(courseSchedules)
            % Check if the cell value is 1
            if courseSchedules{row, col} == 1
                % Get the course name from the first column
                courseName = courseSchedules{row, 1};
                semSet{end+1} = courseName; % Append to the semester set
            end
        end
        
        % Add the current semester set to the total set
        totalCourseSet{end+1} = semSet;
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Graph building
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [graph, nodeTable, roots] = buildCombinationGraph(courses, termNames, totalOfferedCourseSet, maxCourses, year)
    % Create a directed graph (only stores node IDs and edges)
    graph = digraph();

    % Initialize table for storing node attributes
    nodeTable = table([], {}, {}, 'VariableNames', {'ID', 'ClassCombination', 'Term'}); 

    % Map to track unique nodes 
    nodeMap = containers.Map('KeyType', 'char', 'ValueType', 'char');

    prevNodes = {}; % Nodes from the previous term
    roots = {}; % Store root nodes explicitly
    nodeCounter = 1; % Unique node ID counter

    % Generate root nodes (combinations for the first term)
    firstTermCombinations = getFirstTermCourses(courses, totalOfferedCourseSet, maxCourses);
    % Add first-term nodes to the graph
    for i = 1:length(firstTermCombinations)
        combination = firstTermCombinations{i};
        term = termNames{1};
        classCombination = strjoin(combination, '-');
        nodeKey = strcat(classCombination, '-', term); % Unique key for the node

        % Check if node already exists
        if isKey(nodeMap, nodeKey)
            nodeId = nodeMap(nodeKey); % Use existing node ID
        else
            nodeId = num2str(nodeCounter); % Generate new node ID
            graph = addnode(graph, nodeId); % Add node to graph

            % Store node properties
            newNode = table({nodeId}, {classCombination}, {term}, ...
                            'VariableNames', {'ID', 'ClassCombination', 'Term'});
            nodeTable = [nodeTable; newNode];

            % Store in nodeMap to prevent duplicates
            nodeMap(nodeKey) = nodeId;
            nodeCounter = nodeCounter + 1;
        end

        prevNodes{end+1} = struct('id', nodeId, 'courses', combination, 'term', term);
        roots{end+1} = nodeId;
    end

    % Iteratively add nodes for subsequent terms
    for termIndex = 2:min(year * 2, numel(termNames))
        newNodes = {}; % Nodes for the current term
        term = termNames{termIndex}; % Get term name

        % Generate combinations for the current term based on prevNodes
        for i = 1:length(prevNodes)
            takenCourses = prevNodes{i}.courses; % Courses already taken
            disp(term)
            nextCombinations = getNextTermCourses(courses, totalOfferedCourseSet, termIndex, takenCourses, maxCourses);

            for j = 1:length(nextCombinations)
                nextCombination = nextCombinations{j};
                classCombination = strjoin(nextCombination, '-');
                nodeKey = strcat(classCombination, '-', term); % Unique key for the node

                % Check if node already exists
                if isKey(nodeMap, nodeKey)
                    nodeId = nodeMap(nodeKey); % Use existing node ID
                else
                    nodeId = num2str(nodeCounter);
                    graph = addnode(graph, nodeId);

                    % Store node properties
                    newNode = table({nodeId}, {classCombination}, {term}, ...
                                    'VariableNames', {'ID', 'ClassCombination', 'Term'});
                    nodeTable = [nodeTable; newNode];

                    % Store in nodeMap to prevent duplicates
                    nodeMap(nodeKey) = nodeId;
                    nodeCounter = nodeCounter + 1;
                end

                % Add edge from previous node to the current node (only if it does not exist)
                if ~ismember(nodeId, successors(graph, prevNodes{i}.id))
                    graph = addedge(graph, prevNodes{i}.id, nodeId);
                end

                % Track the node for the next iteration
                % Inside buildCombinationGraph where newNodes are tracked
                disp("here is taken courses:");
                disp(takenCourses);
                disp("nextCombination:");
                disp(nextCombination);
                newCourses = unique([takenCourses, nextCombination]); % Prevent duplicate courses

                % Store new node
                newNodes{end+1} = struct('id', nodeId, 'courses', newCourses, 'term', term);
            end
        end

        % Update previous nodes for the next term
        prevNodes = newNodes;
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GENERATE COURSE COMBINATIONS FOR FIRST TERM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function courseCombinations = getFirstTermCourses(courses, totalOfferedCourseSet, maxCourses)
    noPrereqs = string(courses.Nodes.Name(outdegree(courses) == 0));
    % Courses offered in the first semester
    offeredCoursesFirstTerm = string(totalOfferedCourseSet{1});
    % Filter courses with no prerequisites that are also offered in the first term
    validCoursesFirstTerm = intersect(noPrereqs, offeredCoursesFirstTerm);
    
    % Generate all possible subsets of valid courses (up to maxCourses)
    courseCombinations = {};
    for numCourses = 1:min(maxCourses, length(validCoursesFirstTerm))
        combos = nchoosek(validCoursesFirstTerm, numCourses); % Generate subsets
        for i = 1:size(combos, 1)
            courseCombinations{end + 1} = combos(i, :);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GENERATE COURSE COMBINATIONS FOR SUBSEQUENT TERMS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function nextTermCourseCombinations = getNextTermCourses(courses, totalOfferedCourseSet, TermIndex, allTakenCourses, maxCourses)
    offeredCoursesNextTerm = string(totalOfferedCourseSet{TermIndex});
    % Initialize the list of valid courses
    validCoursesNextTerm = [];
    
    % Check each course offered in the next term
    for i = 1:length(offeredCoursesNextTerm)
        course = offeredCoursesNextTerm(i); % Current course to validate
        % Map the course name to its numeric index
        courseID = findnode(courses, course);
        % Find the prerequisites of this course (successors in the graph) 
        % Only work in nodeID
        prereqIDs = successors(courses, courseID);
        % Convert prerequisite IDs to names
        prereqNames = string(courses.Nodes.Name(prereqIDs)); %courses.Node.Name is a cell array
        % Check if all prerequisites are in the taken courses
        if all(ismember(prereqNames, allTakenCourses))
            validCoursesNextTerm = [validCoursesNextTerm; course]; % Add to valid courses
        end
   
    end
    
    validCoursesNextTerm = setdiff(validCoursesNextTerm, allTakenCourses);
    % Generate all possible subsets of valid courses (up to maxCourses)
    nextTermCourseCombinations = {};
    for numCourses = 1:min(maxCourses, length(validCoursesNextTerm))
        combos = nchoosek(validCoursesNextTerm, numCourses); % Generate subsets
        for i = 1:size(combos, 1)
            nextTermCourseCombinations{end + 1} = combos(i, :); % Add each combination
        end
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DFS TO FIND ALL VALID PATHS 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function validPaths = dfsFindValidPaths(graph, roots, nodeTable, allBucketCombinations)
%     % Initialize variables
%     validPaths = {}; % Store valid paths that satisfy all buckets
% 
%     % Perform DFS from each root
%     for i = 1:length(roots)
%         % Reset `visited` for each root to allow independent exploration
%         visited = containers.Map('KeyType', 'char', 'ValueType', 'logical');
% 
%         % Initialize a stack for DFS traversal (store node IDs as numeric values)
%         stack = {struct('node', str2double(roots{i}), 'path', {str2double(roots(i))})}; 
% 
%         % Perform iterative DFS
%         while ~isempty(stack)
%             % Pop the current state from the stack
%             currentState = stack{end};
%             stack(end) = [];
%             currentNode = currentState.node;
%             currentPath = currentState.path;
% 
%             % Mark the current node as visited
%             if isKey(visited, num2str(currentNode)) && visited(num2str(currentNode))
%                 continue;
%             end
%             visited(num2str(currentNode)) = true;
% 
%             % Extract the courses taken so far in the path
%             coursesTaken = extractCoursesFromPath(currentPath, nodeTable);
% 
%             % **Early Bucket Check**: If path already satisfies buckets, store it and stop
%             if areBucketsSatisfied(allBucketCombinations, coursesTaken)
%                 validPaths{end+1} = currentPath;
%                 continue; % Stop exploring further for this path
%             end
% 
%             % Get successors and continue DFS
%             neighbors = successors(graph, num2str(currentNode));
%             for j = 1:length(neighbors)
%                 stack{end+1} = struct('node', str2double(neighbors{j}), 'path', [currentPath, str2double(neighbors{j})]); 
%             end
%         end
%     end
% end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DFS TO FIND ALL VALID PATHS 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [legit,validPaths] = dfsFindValidPaths(graph, roots, nodeTable, minimalRequirementSets)
    % Initialize variables
    validPaths = {}; % Store valid paths that satisfy all bucket requirements
    legit = {};

    % Perform DFS from each root
    for i = 1:length(roots)
        % Reset `visited` for each root to allow independent exploration
        visited = containers.Map('KeyType', 'char', 'ValueType', 'logical');

        % Initialize a stack for DFS traversal (store node IDs as numeric values)
        stack = {struct('node', str2double(roots{i}), 'path', {str2double(roots(i))})}; 
        
        % Perform iterative DFS
        while ~isempty(stack)
            % Pop the current state from the stack
            currentState = stack{end};
            stack(end) = [];
            currentNode = currentState.node;
            currentPath = currentState.path;

            % Mark the current node as visited
            if isKey(visited, num2str(currentNode)) && visited(num2str(currentNode))
                continue;
            end
            visited(num2str(currentNode)) = true;

            % Extract the courses taken so far in the path
            coursesTaken = extractCoursesFromPath(currentPath, nodeTable);
            % **Early Bucket Check**: If the current path satisfies a minimal requirement, store it and stop exploring further
            if checkMinimalRequirement(coursesTaken, minimalRequirementSets)
                validPaths{end+1} = currentPath;
                legit{end+1} = coursesTaken;
                continue; % Stop further exploration of this path
            end

            % Get successors and continue DFS
            neighbors = successors(graph, num2str(currentNode));
            for j = 1:length(neighbors)
                stack{end+1} = struct('node', str2double(neighbors{j}), 'path', [currentPath, str2double(neighbors{j})]); 
            end
        end
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CHECK IF A PATH SATISFIES ALL BUCKET REQUIREMENTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function isSatisfied = areBucketsSatisfied(allBucketCombinations, coursesTaken)
%     % Assume all buckets are satisfied initially
%     isSatisfied = true;
% 
%     for bucketIndex = 1:length(allBucketCombinations)
%         bucketCombinations = allBucketCombinations{bucketIndex};
% 
%         % Check if any combination in the bucket is satisfied
%         bucketSatisfied = false;
%         for combIndex = 1:length(bucketCombinations)
%             bucketCombination = bucketCombinations{combIndex};
% 
%             % If one valid combination exists, mark as satisfied
%             if all(ismember(bucketCombination, coursesTaken))
%                 bucketSatisfied = true;
%                 break;
%             end
%         end
% 
%         % If a bucket is not satisfied, return false
%         if ~bucketSatisfied
%             isSatisfied = false;
%             return;
%         end
%     end
% end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CHECK IF A PATH SATISFIES ANY MINIMAL REQUIREMENT SET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function isSatisfied = checkMinimalRequirement(coursesTaken, minimalRequirementSets)
    isSatisfied = any(cellfun(@(reqSet) isequal(sort(coursesTaken), sort(reqSet)), minimalRequirementSets));
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% EXTRACT COURSES TAKEN FROM A PATH USING `nodeTable`
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function coursesTaken = extractCoursesFromPath(path, nodeTable)
    nodeIDs = string(nodeTable.ID);  % Convert table column to string array
    path = string(path);  % Ensure `path` elements are also strings
    coursesTaken = {};  % Initialize course storage

    for i = 1:length(path)
        nodeIdx = find(nodeIDs == path(i), 1);  % Find row in nodeTable
        if ~isempty(nodeIdx)
            courseList = strsplit(string(nodeTable.ClassCombination(nodeIdx)), '-');
            coursesTaken = unique([coursesTaken, courseList]); % Remove duplicates
        end
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FUNCTION TO EXTRACT VALID COURSES FROM VALID PATHS 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function validCourses = extractValidCoursesBySemester(validPaths, nodeTable)
    numPaths = length(validPaths); % Total number of valid paths
    validCourses = cell(numPaths, 1); % Preallocate cell array for output

    for i = 1:numPaths
        path = validPaths{i}; % Get current path (sequence of node IDs)
        semesterCourses = cell(1, length(path)); % Initialize for each semester

        for j = 1:length(path)
            % Find the corresponding course combination in nodeTable
            nodeIdx = find(string(nodeTable.ID) == string(path(j)), 1);

            if ~isempty(nodeIdx)
                semesterCourses{j} = string(nodeTable.ClassCombination(nodeIdx)); % Store course combination
            else
                semesterCourses{j} = "UNKNOWN"; % Handle missing IDs
            end
        end

        % Store the semester-wise course sequence row-wise
        validCourses{i} = semesterCourses;
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FUNCTION TO FIND ALL SHORTEST VALID COURSE PATHS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function shortestPaths = findAllShortestValidCoursePaths(validCourses)
    if isempty(validCourses)
        shortestPaths = {}; % Return empty if no valid paths exist
        return;
    end

    % Calculate the number of semesters for each path
    pathLengths = cellfun(@length, validCourses);
    
    % Find the minimum path length
    minLength = min(pathLengths);
    
    % Extract all paths that have this minimum length
    shortestPaths = validCourses(pathLengths == minLength);
end